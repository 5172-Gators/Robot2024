// Copyright (c) FIRST and other WPILib contributors.
// Open Source Software; you can modify and/or share it under the terms of
// the WPILib BSD license file in the root directory of this project.

package frc.robot.subsystems;

import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.SubsystemBase;
import frc.robot.Constants;

import com.revrobotics.CANSparkBase.ControlType;
import com.revrobotics.CANSparkBase.IdleMode;
import com.revrobotics.CANSparkBase.SoftLimitDirection;
import com.revrobotics.CANSparkLowLevel.MotorType;
import com.revrobotics.CANSparkMax;
import com.revrobotics.RelativeEncoder;
import com.revrobotics.SparkPIDController;

public class TrapScorer extends SubsystemBase {
  /** Creates a new TrapScorer. */

  CANSparkMax elevatorMotor;
  CANSparkMax wheelsMotor;

  RelativeEncoder elevatorRelativeEncoder;
  RelativeEncoder wheelsRelativeEncoder;

  SparkPIDController elevatorPIDController;
  SparkPIDController wheelsPIDController;

  public TrapScorer() {

    // elevator motor
    elevatorMotor = new CANSparkMax(Constants.TrapScorer.elevatorMotorID, MotorType.kBrushless);
    elevatorMotor.restoreFactoryDefaults();
    elevatorMotor.setInverted(false);
    elevatorMotor.setIdleMode(IdleMode.kBrake);

    // relative encoder
    elevatorRelativeEncoder = elevatorMotor.getEncoder();

    // PID controller
    elevatorPIDController = elevatorMotor.getPIDController();
    elevatorPIDController.setP(Constants.TrapScorer.elevator_kP);
    elevatorPIDController.setI(Constants.TrapScorer.elevator_kI);
    elevatorPIDController.setD(Constants.TrapScorer.elevator_kD);
    elevatorPIDController.setFF(Constants.TrapScorer.elevator_kFF);

    // elevator soft limits
    elevatorMotor.setSoftLimit(SoftLimitDirection.kForward, Constants.TrapScorer.maxElevatorPosition);
    elevatorMotor.setSoftLimit(SoftLimitDirection.kReverse, Constants.TrapScorer.minElevatorPosition);
    // elevatorMotor.enableSoftLimit(SoftLimitDirection.kForward, true);
    // elevatorMotor.enableSoftLimit(SoftLimitDirection.kReverse, true);
     

    // scoring wheels motor
    wheelsMotor = new CANSparkMax(Constants.TrapScorer.wheelsMotorID, MotorType.kBrushless);
    wheelsMotor.restoreFactoryDefaults();
    wheelsMotor.setInverted(false);
    wheelsMotor.setIdleMode(IdleMode.kCoast);

    // relative encoder
    wheelsRelativeEncoder = elevatorMotor.getEncoder();

    // PID controller
    wheelsPIDController = elevatorMotor.getPIDController();
    wheelsPIDController.setP(Constants.TrapScorer.wheels_kP);
    wheelsPIDController.setI(Constants.TrapScorer.wheels_kI);
    wheelsPIDController.setD(Constants.TrapScorer.wheels_kD);
    wheelsPIDController.setFF(Constants.TrapScorer.wheels_kFF);
  }

  public void setElevatorPosition(double setpoint){

    elevatorPIDController.setReference(setpoint, ControlType.kPosition);

  }

  public void setScoringWheelsRPM(double setpoint){

    wheelsPIDController.setReference(setpoint, ControlType.kVelocity);

  }

  public double getElevatorPosition(){

    return elevatorRelativeEncoder.getPosition();

  }

  public double getWheelsRPM(){

    return wheelsRelativeEncoder.getVelocity();

  }
  

  @Override
  public void periodic() {
    // This method will be called once per scheduler run

    SmartDashboard.putNumber("Trap Score Wheels RPM", this.getWheelsRPM());
    SmartDashboard.putNumber("Trap Score Elevator RPM", this.getElevatorPosition());

  }
}
