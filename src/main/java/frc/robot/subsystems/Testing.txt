// Copyright (c) FIRST and other WPILib contributors.
// Open Source Software; you can modify and/or share it under the terms of
// the WPILib BSD license file in the root directory of this project.

package frc.robot.subsystems;

import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.SubsystemBase;
import frc.robot.Constants;

import com.revrobotics.CANSparkFlex;
import com.revrobotics.CANSparkMax;
import com.revrobotics.RelativeEncoder;
import com.revrobotics.SparkPIDController;
import com.revrobotics.CANSparkBase.IdleMode;
import com.revrobotics.CANSparkLowLevel.MotorType;

public class Testing extends SubsystemBase {
  /** Creates a new testing. */
  CANSparkMax testMotor;

  CANSparkFlex testSparkFlex;
  RelativeEncoder testPosition;
  SparkPIDController m_pidController;


  public Testing() {

    testSparkFlex = new CANSparkFlex(2, MotorType.kBrushless);
    testSparkFlex.restoreFactoryDefaults();
    testSparkFlex.setInverted(false);
    testSparkFlex.setIdleMode(IdleMode.kBrake);

    testPosition = testSparkFlex.getEncoder();

    m_pidController = testSparkFlex.getPIDController();

    m_pidController.setP(Constants.Turret.kP);
    m_pidController.setI(Constants.Turret.kI);
    m_pidController.setD(Constants.Turret.kD);
    m_pidController.setFF(Constants.Turret.kFF);
    m_pidController.setOutputRange(Constants.Turret.minOutput, Constants.Turret.maxOutput);

    testMotor = new CANSparkMax(7, MotorType.kBrushed);
    testMotor.restoreFactoryDefaults();
    testMotor.setInverted(false);
    testMotor.setIdleMode(IdleMode.kBrake);

  }

  public void runMotor(double speed){

    testSparkFlex.set(speed);

    // testMotor.set(speed);

  }

  public void setRotatePosition(double position){

    m_pidController.setReference(position, CANSparkFlex.ControlType.kPosition);
    
  }

  @Override
  public void periodic() {
    // This method will be called once per scheduler run

    double m_currentPosition = testPosition.getPosition();

    SmartDashboard.putNumber("Turret Rotate Positon", m_currentPosition);
  }
}
